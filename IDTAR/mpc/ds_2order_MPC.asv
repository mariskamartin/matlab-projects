%
% Simulace soustavy druheho radu.
% s MPC regulatorem
%

clear all;
Ts = 0.1; %time stamp / vzorkovaci perioda
numOfValues = 300; %number of values in one step 
%vytvoreni systemu 2. radu
sysTF = tf(1,[1 1 1]); 

D=c2d(sysTF,Ts); %to discreet representation
[A,B,C,D]=ssdata(D); %to state space model

u = ones(1,numOfValues*3); %input data for step
w = [ones(1,numOfValues) 2*ones(1,numOfValues) 2.6*ones(1,numOfValues)]; %reference variable
T = 0:Ts:length(u)*Ts; %time data
x = [0; 0]; %initial state - vertical

% inicializace regulatoru
N = 10; %horizont
R = eye(N);
Q = eye(length(x)); Qn = Q; %Qn ... penalizace koncoveho stavu
[Syx,Syu,Sxx,Sxu] = predictiveMatrixes(A,B,C,N);
Zx = inv(eye(length(A))-A)*B;
Zxy = Zx*inv(C*Zx+D);
M = R+Syu'*Q*Syu+Sxu'*Qn*Sxu;
un0=zeros(1,N);
% simulace
y = zeros(1,length(u));
for k = 1:length(u)
    y(k)=C*x+D*u(k); % predpoklad ze u(k) ma z minula stale stejnou honodtu: y(k)= C*x + D*u(k-1)
    x=A*x+B*u(k);
    un0=[un0(2:end) un0(end)]; %shift minulych hodnot
    dxn=Zxy*w(k+N-1)-Sxx*x-Sxu*un0;
    dwn=w(k:k+N-1)'-Syx*x-Syu*un0;
    m=-(Sxu'*Qn*dxn+Syu'*Q*dwn);
    du=-M\m; %analiticke reseni  %quadprog(M,m); %bez omezeni
    un0=un0+du; %aktualizace pro dalsi kolo 
    u(k)=u(k)+du(1);
end

stairs(T(1:end-1),w,'-b');
hold on; 
stairs(T(1:end-1),y,'-r');
stairs(T(1:end-1),u,':k');
legend('w','y','u')
hold off; 

